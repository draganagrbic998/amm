package main;

import com.github.drapostolos.rdp4j.DirectoryPoller;
import com.github.drapostolos.rdp4j.spi.PolledDirectory;
import config.Configuration;
import config.InitSapConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

@Singleton
@Startup
public class FTPInit {

    private static final Log LOG = LogFactory.getLog(FTPInit.class);
    private static ArrayList<DirectoryPoller> directoryPollers = null;
    private static Timer timer = null;
    private static TimerTask hourlyTask = null;

    private static Timer configTimer = null;
    private static TimerTask configTimerTask = null;


    @PostConstruct
    public void configInit() {

        LOG.info("POST CONSTRUCT AMM");

        try {

            configTimer = new Timer();
            configTimerTask = new TimerTask () {
                @Override
                public void run () {
                    LOG.info("Config reloading");
                    remove();
                    init();
                    LOG.info("Config reloaded");
                }
            };
            int reloadTime = 480;
            try{
                reloadTime = Integer.parseInt(Configuration.configReloadTime);
            }
            catch (Exception e){
                reloadTime = 480;
                LOG.fatal(e.getMessage());
            }
            LOG.info("Schedule start");
            configTimer.schedule (configTimerTask, 1000*60l, 1000*60l*reloadTime);
            LOG.info("Schedule end");
        } catch (Exception e) {
            LOG.fatal("Failed to reload config");
        }
    }


    public void init() {

        LOG.info("AMM Adapter config initializing!");
        InitSapConfiguration.init();

        directoryPollers = new ArrayList<>();
        LOG.info("AMM Adapter initializing!");
        try {

            String host = Configuration.smbHost; //"smb://odsdevisapp.eps.local/NITES/AMM/";
            String archiveUrl = Configuration.smbArchiveUrl;//"smb://odsdevisapp.eps.local/NITES/ARCH/AMM/";
            String smbBaseUrl = Configuration.smbBaseUrl;
            String domain =  Configuration.smbDomain;
            String username =  Configuration.smbUsername;
            String password =  Configuration.smbPassword;

            /*
            LOG.info("AMM HOST : "+host);
            LOG.info("AMM ARCHIVE : "+archiveUrl);
            LOG.info("AMM DOMAIN : "+ domain);
            LOG.info("AMM USERNAME : "+username);
            LOG.info("AMM PASSWORD : "+password);

             */

            jcifs.Config.setProperty("jcifs.smb.client.disablePlainTextPasswords","false");

            //LOG.info("AMM Config DONE!");

            int interval = 10;

            ArrayList<FileListener> listeners = new ArrayList<>();

            LOG.info("SIZE IS : " + Configuration.smbUrls.size());

            for (String url:Configuration.smbUrls) {

                LOG.info("ADDING URL : " + smbBaseUrl+url);
                FtpDirectory polledDirectory = new FtpDirectory(smbBaseUrl+url, null, archiveUrl+url, domain, username, password);
                FileListener listener = new FileListener(polledDirectory);
                listeners.add(listener);

                LOG.info("Directory is : " + smbBaseUrl+url + " Archive is : " + archiveUrl+url);
                DirectoryPoller dp = DirectoryPoller.newBuilder().addPolledDirectory(polledDirectory).addListener(listener)
                        .enableFileAddedEventsForInitialContent().setPollingInterval(interval, TimeUnit.SECONDS).start();
                directoryPollers.add(dp);
            }

            LOG.info("DirectoryPoller is set");
            timer = new Timer();
            hourlyTask = new TimerTask() {
                @Override
                public void run() {
                   // LOG.info("PROCESS QUEUED TRIGGERED");
                    for (FileListener listener:listeners) {
                        listener.processQueued();
                    }
                }
            };

            int time = 300;
            try {
                time = Integer.parseInt(Configuration.smbCheckIntervalSec);
            }catch (Exception e){
                time = 300;
            }
            //LOG.info("Time delay is : " + time);
            // schedule the task to run starting now and then every hour...
            timer.schedule(hourlyTask, 1000 * 60l, 1000 * time);

            LOG.info("AMM Adapter initializing SUCCESSFUL!");
            // TimeUnit.HOURS.sleep(2);


            // dp.stop();
        } catch (Exception e) {
            for (DirectoryPoller dp: directoryPollers) {
                dp.stop();
            }
            timer.cancel();
            timer.purge();
            hourlyTask.cancel();
            LOG.fatal("AMM Adapter initializing ERROR!" + e.toString());
        }

    }

    @PreDestroy
    public void remove() {
        LOG.info("AMM Adapter ENDED");
        if(timer!=null){
            timer.cancel();
            timer.purge();
            hourlyTask.cancel();
        }
        if(directoryPollers!=null) {
            for (DirectoryPoller dp : directoryPollers) {
                dp.stop();
                dp.stopNow();
            }
        }
    }


}