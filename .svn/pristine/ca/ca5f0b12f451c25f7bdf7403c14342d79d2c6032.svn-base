package main;


import config.Configuration;
import eu.nites.esb.iec.common.message.base.*;
import eu.nites.esb.iec.common.message.common.ReadingTypeRef;
import eu.nites.esb.iec.common.message.meterreadings.MeterAsset;
import eu.nites.esb.iec.common.message.meterreadings.MeterReading;
import eu.nites.esb.iec.common.message.meterreadings.MeterReadings;
import eu.nites.esb.iec.common.message.meterreadings.Readings;
import eu.nites.esb.iec.common.message.reply.ReplyMessage;
import external.ws.SendMeterReadings;
import external.ws.SendMeterReadings_Service;
import jdk.internal.org.xml.sax.SAXException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;

public class Transformer {

    private static final Log LOG = LogFactory.getLog(Transformer.class);

    private static XMLGregorianCalendar stringToXmlGregorianCalendar(String value, boolean dots) throws SAXException {

        try {
            SimpleDateFormat simpleDateFormat;
            if(dots){
                simpleDateFormat = new SimpleDateFormat("dd.MM.yyyy HH.mm.ss");
            }else{
                simpleDateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
            }
            Date date = simpleDateFormat.parse(value);
            GregorianCalendar gregorianCalendar = (GregorianCalendar) GregorianCalendar.getInstance();
            gregorianCalendar.setTime(date);

            return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
        } catch (Exception e) {
            throw new SAXException("Parsing error!");
        }
    }

    private static ReplyMessage sendToServer(IecMessage msg, String filePath) {

        URL url = null;
        try {
            //LOG.info("URL IS : " + Configuration.eps_base_url + Configuration.eps_amm);
            url = new URL(Configuration.eps_base_url + Configuration.eps_amm);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        if (url != null) {
            SendMeterReadings_Service service = new SendMeterReadings_Service(url);
            SendMeterReadings port = service.getSendMeterReadingsPort();
            return port.createMeterReadings(msg);
        } else {
            LOG.fatal("Message not sent. URL is invalid." + "File : "+ filePath + " was not sent.");
            return null;
        }
    }

    public static void sendIecMessage(IecMessage msg, String filePath) {
        sendToServer(msg, filePath);
    }

    public static IecMessage setHeader(IecMessage iecMessage, VerbEnum verb, NounEnum noun, String id, String filePath) {

        iecMessage.setHeader(new Header());
        iecMessage.getHeader().setVerb(verb);
        iecMessage.getHeader().setNoun(noun);
        iecMessage.getHeader().setCorrelationID(id);

        iecMessage.getHeader().setSource(SourceEnum.COMET);

        Date date = new Date();
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        gregorianCalendar.setTime(date);

        GregorianCalendar gregorianCalendarIDOC = new GregorianCalendar();

        try {
            iecMessage.getHeader()
                    .setTimestamp(DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar));
        } catch (DatatypeConfigurationException e) {
            LOG.fatal("ERROR IN THE CALENDAR CONVERSION" + "Header date parsing EXCEPTION happened for file : " + filePath);
        }

        return iecMessage;
    }

    public static IecMessage convertToIec(String line, IecMessage iecMessage, String filePath) {

        String manuf = line.substring(0, 6);

        String specialManuf = manuf.substring(0, 3);

        String serial = line.substring(6, 15);

        if(specialManuf.equals("SIT")){
            manuf = manuf.substring(0,6);
        }else if(specialManuf.equals("MAC")){
            manuf = manuf.substring(0,6);
        }else if(specialManuf.equals("ENL")){
            if(!manuf.contains("ENLDB2") && !manuf.contains("ENLDMG")){
                manuf = manuf.substring(0, 3); //SAGEM
                serial = line.substring(7, 15); //SAGEM //0207 cutoff
            }else{
                manuf = manuf.substring(0,6);
            }
        }else if(specialManuf.equals("SGM")){
            manuf = manuf.substring(0, 3); //SGM
            serial = line.substring(7, 15); //SGM //0207 cutoff
        }

        String date = line.substring(15, 34);

        XMLGregorianCalendar xmlDate = null;

        try {
            boolean dots = false;
            if(date.charAt(13) =='.')
                dots = true;
            xmlDate = stringToXmlGregorianCalendar(date.trim(), dots);
        } catch (Exception e) {

            LOG.fatal("EXCEPTION WHEN PARSING DATE : " + "DATE WAS : " + date +" ERROR : " + e.toString() + System.lineSeparator() + "Date parsing EXCEPTION happened for file : " + filePath);
        }

        String vtActiveEnergy = line.substring(34, 44);

        String mtActiveEnergy = line.substring(44, 54);

        String vtActivePower = line.substring(54, 61);

        String mtActivePower = line.substring(61, 68);

        String vtReactiveEnergy = line.substring(68, 78);

        String mtReactiveEnergy = line.substring(78, 88);

        //String vtReactivePower = line.substring(88, 95);

        //String mtReactivePower = line.substring(95, 102);

        MeterReading mr = new MeterReading();

        MeterAsset ma = new MeterAsset();
        ma.setMrid(serial + "-" + manuf);

        mr.setReadings(new ArrayList<>());

        //VT ACTIVE ENERGY
        Readings rActiveEnerg1 = new Readings();

        ReadingTypeRef rtrActiveEnerg1 = new ReadingTypeRef();
        rtrActiveEnerg1.setMrid("ActiveEnergyPlus_CUM_T1_Billing");

        rActiveEnerg1.setTimeStamp(xmlDate);
        rActiveEnerg1.setReadingType(rtrActiveEnerg1);
        rActiveEnerg1.setValue(vtActiveEnergy);

        mr.getReadings().add(rActiveEnerg1);

        //MT ACTIVE ENERGY
        Readings rActiveEnerg2 = new Readings();

        ReadingTypeRef rtrActiveEnerg2 = new ReadingTypeRef();
        rtrActiveEnerg2.setMrid("ActiveEnergyPlus_CUM_T2_Billing");

        rActiveEnerg2.setTimeStamp(xmlDate);
        rActiveEnerg2.setReadingType(rtrActiveEnerg2);
        rActiveEnerg2.setValue(mtActiveEnergy);

        mr.getReadings().add(rActiveEnerg2);

        //VT ACTIVE POWER
        Readings rActivePower1 = new Readings();
        ReadingTypeRef rtrActivePow1 = new ReadingTypeRef();
        rtrActivePow1.setMrid("ActivePowerPlus_MAX_15min_T1_Billing");

        rActivePower1.setTimeStamp(xmlDate);
        rActivePower1.setReadingType(rtrActivePow1);
        rActivePower1.setValue(vtActivePower);

        mr.getReadings().add(rActivePower1);

        //MT ACTIVE POWER
        Readings rActivePower2 = new Readings();

        ReadingTypeRef rtrActivePow2 = new ReadingTypeRef();
        rtrActivePow2.setMrid("ActivePowerPlus_MAX_15min_T2_Billing");

        rActivePower2.setTimeStamp(xmlDate);
        rActivePower2.setReadingType(rtrActivePow2);
        rActivePower2.setValue(mtActivePower);

        mr.getReadings().add(rActivePower2);

        //VT REACTIVE ENERGY
        Readings rReActiveEnerg1 = new Readings();

        ReadingTypeRef rtrReActiveEnerg1 = new ReadingTypeRef();
        rtrReActiveEnerg1.setMrid("ReactiveEnergyPlus_CUM_T1_Billing");

        rReActiveEnerg1.setTimeStamp(xmlDate);
        rReActiveEnerg1.setReadingType(rtrReActiveEnerg1);
        rReActiveEnerg1.setValue(vtReactiveEnergy);

        mr.getReadings().add(rReActiveEnerg1);

        //MT REACTIVE ENERGY
        Readings rReActiveEnerg2 = new Readings();

        ReadingTypeRef rtrReActiveEnerg2 = new ReadingTypeRef();
        rtrReActiveEnerg2.setMrid("ReactiveEnergyPlus_CUM_T2_Billing");

        rReActiveEnerg2.setTimeStamp(xmlDate);
        rReActiveEnerg2.setReadingType(rtrReActiveEnerg2);
        rReActiveEnerg2.setValue(mtReactiveEnergy);

        mr.getReadings().add(rReActiveEnerg2);

/*		//FOR LATER USE
		//VT REACTIVE POWER
		Readings rReActivePower1 = new Readings();

		ReadingTypeRef rtrReActivePower1 = new ReadingTypeRef();
		rtrReActivePower1.setMrid("ReactivePOWERPlus_CUM_T1_Billing");

		rReActivePower1.setTimeStamp(xmlDate);
		rReActivePower1.setReadingType(rtrReActivePower1);
		rReActivePower1.setValue(vtReactivePower);

		mr.getReadings().add(rReActivePower1);

		//MT REACTIVE POWER
		Readings rReActivePower2 = new Readings();

		ReadingTypeRef rtrReActivePower2 = new ReadingTypeRef();
		rtrReActivePower2.setMrid("ReactivePOWERPlus_CUM_T2_Billing");

		rReActivePower2.setTimeStamp(xmlDate);
		rReActivePower2.setReadingType(rtrReActivePower2);
		rReActivePower2.setValue(mtReactivePower);

		mr.getReadings().add(rReActivePower2);

 */
        mr.setMeterAsset(ma);

        boolean added = ((MeterReadings) iecMessage.getPayload().getBasePayload()).getMeterReading().add(mr);

        return iecMessage;
    }

}
